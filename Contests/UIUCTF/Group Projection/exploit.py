from Crypto.Util.number import *
import hashlib
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from pwn import *

context.log_level = 'error'
while True:
    io = remote("group-projection.chal.uiuc.tf", 1337)
    g = 2

    io.recvuntil(b"p = ")
    p = int(io.recvline())

    if p%3 == 1 and pow(g, (p - 1)//3, p) == 1:
        io.sendlineafter(b"k = ", str((p - 1)//3).encode())
        io.recvuntil(b"c = ")
        ct = long_to_bytes(int(io.recvline()))

        key = hashlib.md5(long_to_bytes(1)).digest()
        cipher = AES.new(key, AES.MODE_ECB)
        flag = unpad(cipher.decrypt(ct), 16)
        print(flag)
        exit(0)
    
    io.close()