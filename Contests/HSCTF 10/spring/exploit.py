from crack import crackSeed, nextLong, getSigned, signedLongToInt

class CrackJavaRandom:
    def __init__(self, first_long) -> None:
        self.seed = crackSeed(first_long)
        
    def nextLong(self):
        self.seed, nextL = nextLong(self.seed)
        return nextL

# png magic header
magic = [137, 80, 78, 71, 13, 10, 26, 10]
stream = bytes(magic)
output = eval(open("./out.txt", "r").read())

first_long = getSigned(
    getSigned(getSigned(magic[0], 8) << 56, 64) + 
    getSigned(getSigned(magic[1], 8) << 48, 64) + 
    getSigned(getSigned(magic[2], 8) << 40, 64) + 
    getSigned(getSigned(magic[3], 8) << 32, 64) + 
    getSigned(getSigned(magic[4], 8) << 24, 64) + 
    getSigned(getSigned(magic[5], 8) << 16, 64) + 
    getSigned(getSigned(magic[6], 8) <<  8, 64) + 
    getSigned(getSigned(magic[7], 8)      , 64), 64
) ^ output[0]

rnd = CrackJavaRandom(first_long)

for i in range(1, len(output)):
    f = signedLongToInt(rnd.nextLong()) ^ signedLongToInt(output[i])
    tmp = []
    for _ in range(8):
        tmp += [f % 2**8]
        f //= 2**8
    
    stream += bytes(tmp[::-1])

with open("flag.png", "wb") as fi:
    fi.write(stream)
    fi.close()