from sage.all import *
from pwn import *
from Crypto.Util.number import *

context.log_level = 'debug'
io = remote("matrixrsa2.chal.crewc.tf", 20002)

# [a, f(m)] [a, f(m)]  [a^2, 2af(m)] [a, f(m)] [a^3, 3a^2f(m)]
# [0, a] [0, a]  [0  , a^2] [0, a] [0  , a^3]

# [a^e, e*f(m)*a^(e - 1)]
# [0  , a^e]
# [a^e=c, 0] -> f(m) = m - a**0x1337 - 0xdeadbeef
# m - 0xdeadbeef = a**0x1337
# (m - 0xdeadbeef)^e = c^0x1337

io.recvuntil(b"flag(enc_0, enc_1):\n")
c0 = int(io.recvline().decode().strip(), 16)
c1 = int(io.recvline().decode().strip(), 16)


io.sendlineafter(b">> ", hex(c0)[2:].encode())
sleep(0.5)
io.sendlineafter(b">> ", hex(2*c1)[2:].encode())

io.recvuntil(b"decrypted message:\n")
m2 = int(io.recvline().decode().strip(), 16)

io.sendlineafter(b">> ", hex(c0)[2:].encode())
sleep(0.5)
io.sendlineafter(b">> ", hex(3*c1)[2:].encode())

io.recvuntil(b"decrypted message:\n")
m3 = int(io.recvline().decode().strip(), 16)
print(long_to_bytes(2*m2 - m3))

io.interactive()