from sage.all import *
from json import *
from random import randint
from mpmath import mp
from Crypto.Util.number import *

def valid(p):
    return isPrime(int(p)) and int(p).bit_length() == 768

def unpad(c):
    return c.split(b'\x00')[-1].decode()

size = 768//8
with open("./dist/output.txt", "r") as f:
    out = eval(f.read().strip())

R = RealField(8*size*16)
n = R(out['n'])

# m^3 = c + k*q/p
# p*m^3 = c*p + kq

for c in continued_fraction(n.exact_rational()).convergents():
    q = int(c.numerator())
    p = int(c.denominator())
    if valid(p) and valid(q):
        mp.dps = 8*size*16
        C = mp.fmul(
            mp.mpf(out['c']), mp.mpf(p)
        )
        
        C  = ceil(C) * pow(p, -1, q) % q
        dq = pow(3, -1, q - 1)
        m  = pow(C, dq, q)
        flag = unpad(long_to_bytes(int(m)))
        print(flag)
        exit()