from sage.all import *
from pwn import *
from Crypto.Util.number import *
from CryptoTools.own.smooth_primes import get_smooth_prime

io = remote("tjc.tf", 31103)

m = int(io.recvline())
s = int(io.recvline())

# find e: s = m^e [mod p*q]
while True:
    p, _ = get_smooth_prime(512)
    q, _ = get_smooth_prime(512)
    try:
        Fp, Fq = GF(p), GF(q)
        ep = discrete_log(Fp(s), Fp(m), operation="*")
        eq = discrete_log(Fq(s), Fq(m), operation="*")
        e = crt([ZZ(ep), ZZ(eq)], [ZZ(Fp(m).multiplicative_order()), ZZ(Fq(m).multiplicative_order())])
        assert s == pow(m, ZZ(e), p*q) and pow(ZZ(e), -1, (p - 1)*(q - 1))
        print("p: " + str(p))
        print("q: " + str(q))
        print("e: " + str(e))
        
        io.sendlineafter(b"P:", str(p).encode())
        io.sendlineafter(b"Q:", str(q).encode())
        io.sendlineafter(b"E:", str(e).encode())
        
        print(io.recvline())
        exit()
    except:
        pass
