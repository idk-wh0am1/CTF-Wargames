from sage.all import *
from Crypto.PublicKey import RSA
from Crypto.Util.number import *

class LCG:
    def __init__(self, params, seed):
        self.state = seed
        self.lcg_m, self.lcg_c, self.lcg_n = params

    def next(self):
        self.state = (self.state * self.lcg_m + self.lcg_c) % self.lcg_n
        return self.state

def recover_lcg(out):
    s1, s2, s3, s4, s5, s6, s7 = out

    # recover modulus
    tmp1 = (s3 - s2)**2 - (s4 - s3)*(s2 - s1)
    tmp2 = (s4 - s3)**2 - (s5 - s4)*(s3 - s2)
    tmp3 = (s5 - s4)**2 - (s6 - s5)*(s4 - s3)
    n = gcd([tmp1, tmp2, tmp3])

    # recover m, c
    m, c = matrix(Zmod(n), [
        [s1, 1],
        [s2, 1]
    ]).solve_right(vector(Zmod(n), [s2, s3]))
    
    return LCG(seed=s1, params=[int(m), int(c), int(n)])


# Load dump.txt
seed = 211286818345627549183608678726370412218029639873054513839005340650674982169404937862395980568550063504804783328450267566224937880641772833325018028629959635
dump = [
    2166771675595184069339107365908377157701164485820981409993925279512199123418374034275465590004848135946671454084220731645099286746251308323653144363063385,
    6729272950467625456298454678219613090467254824679318993052294587570153424935267364971827277137521929202783621553421958533761123653824135472378133765236115,
    2230396903302352921484704122705539403201050490164649102182798059926343096511158288867301614648471516723052092761312105117735046752506523136197227936190287,
    4578847787736143756850823407168519112175260092601476810539830792656568747136604250146858111418705054138266193348169239751046779010474924367072989895377792,
    7578332979479086546637469036948482551151240099803812235949997147892871097982293017256475189504447955147399405791875395450814297264039908361472603256921612,
    2550420443270381003007873520763042837493244197616666667768397146110589301602119884836605418664463550865399026934848289084292975494312467018767881691302197
]

if __name__ == '__main__':
    # Load public key
    key = RSA.importKey(open("./public.pem", "r").read())
    N   = key.n
    e   = key.e

    lcg = recover_lcg([seed] + dump)
    primes_arr = []
    primes_n = 1

    while True:
        for i in range(8):
            while True:
                prime_candidate = lcg.next()

                if not isPrime(prime_candidate):
                    continue
                elif prime_candidate.bit_length() != 512:
                    continue
                else:
                    primes_n *= prime_candidate
                    primes_arr.append(prime_candidate)
                    break
        
        # Check bit length
        if primes_n.bit_length() > 4096:
            print("bit length", primes_n.bit_length())
            primes_arr.clear()
            primes_n = 1
            continue
        else:
            break

    # Create public key 'n'
    n = 1
    for j in primes_arr:
        n *= j
    print("[+] Public Key: ", n)
    print("[+] size: ", n.bit_length(), "bits")

    # Calculate totient 'Phi(n)'
    phi = 1
    for k in primes_arr:
        phi *= (k - 1)

    # Calculate private key 'd'
    d = pow(e, -1, phi)

    # Load encrypted flag
    with open ("flag.txt", "rb") as flag_file:
        ct = int.from_bytes(flag_file.read(), "little")
    
    flag = pow(ct, d, n)
    print("Flag: " + long_to_bytes(flag).decode())