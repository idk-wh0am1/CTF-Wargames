from sage.all import *
from Crypto.PublicKey import RSA
from Crypto.Util.number import *

key = RSA.importKey(open("./public_key.pem.txt", "r").read())
e = key.e
n = key.n
ct = 0x2393118ecdee71b12de76cb3bc14dd5dd10e5807e06593d3e2e96b1e53d48592d15da092377299bc66290c661ad0c29c8d12354da0c188c799ae21a29f8062487e0543a2a714d68a37f0f98e102ea0bd5df186c2c2f8fbf277329b8e017e6898d19ad707ccd3b75c1af4bda00ac9cb9710cb7e37bedd7b71d92c000c00b867e8

def attack(N, e):
    convergents = continued_fraction(ZZ(e) / ZZ(N)).convergents()
    for c in convergents:
        k = c.numerator()
        d = c.denominator()
        
        if pow(pow(2, e, N), d, N) != 2:
            continue
        
        phi = (e * d - 1) // k

        Px = PolynomialRing(ZZ, "x"); x = Px.gen()
        f = x**2 + (n + 1 - phi)*x + N
        roots = f.roots()
        if roots:
            d = inverse(e, ZZ(phi))
            m = pow(ct, ZZ(d), N)
            print(long_to_bytes(ZZ(m)))
            exit()

attack(n, e)