from sage.all import *
from pwn import *
import json
from Crypto.Util.number import long_to_bytes

def get_enc_flag():
    io.sendline(json.dumps({'option':'get_flag'}).encode())
    
    data = json.loads(io.recvline().strip().decode())
    ct   = data["encrypted_flag"]
    N    = data["modulus"]
    a, b = data["padding"]
    return ct, N, a, b

io = remote("socket.cryptohack.org", 13386)
io.recvline()

c1, N1, a1, b1 = get_enc_flag()
c2, N2, a2, b2 = get_enc_flag()
e = 11
assert N1 == N2

io.close()

Px = PolynomialRing(Zmod(N1), "x"); x = Px.gen()
f1 = (a1*x + b1)**e - c1
f2 = (a2*x + b2)**e - c2

def polyGCD(f, g):
    return f.monic() if g == 0 else polyGCD(g, f%g)

m = ZZ(-polyGCD(f1, f2)[0])
flag = long_to_bytes(m)

print("Flag: " + flag.decode())
# Flag: crypto{linear_padding_isnt_padding}